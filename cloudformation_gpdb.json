{
  "AWSTemplateFormatVersion": "2010-09-09", 
  "Description": "Launches a Pivotal GPDB Cluster", 
  "Mappings": {
    "AWSInstanceType2Arch": {
      "c3.xlarge" : { "Arch": "64" }, 
      "c3.2xlarge": { "Arch": "64" }, 
      "c3.4xlarge": { "Arch": "64" }, 
      "c3.8xlarge": { "Arch": "64" },
      "t2.micro"  : { "Arch": "64" },
      "t2.small"  : { "Arch": "64" },
      "m3.medium" : { "Arch": "64" },
      "m3.large"  : { "Arch": "64" },
      "m3.xlarge" : { "Arch": "64" }
    }, 
    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-c6699baf" },
      "us-west-2"      : { "AMI" : "ami-52ff7262" },
      "us-west-1"      : { "AMI" : "ami-3bcc9e7e" },
      "eu-west-1"      : { "AMI" : "ami-0b5b6c7f" },
      "ap-southeast-1" : { "AMI" : "ami-02eb9350" },
      "ap-southeast-2" : { "AMI" : "ami-ab990e91" },
      "ap-northeast-1" : { "AMI" : "ami-14d86d15" },
      "sa-east-1"      : { "AMI" : "ami-0439e619" }
    },

    "SubnetConfig": {
      "Private": { "CIDR": "10.0.1.0/24" }, 
      "Public": { "CIDR": "10.0.0.0/24" }, 
      "VPC": { "CIDR": "10.0.0.0/16" }
    }, 
    "ebs": {
      "ap-northeast-1": { "64": "NOT_YET_SUPPORTED" }, 
      "ap-southeast-1": { "64": "NOT_YET_SUPPORTED" }, 
      "eu-west-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "sa-east-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "us-east-1"     : { "64": "ami-6cb2f706" }, 
      "us-west-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "us-west-2"     : { "64": "NOT_YET_SUPPORTED" }
    }, 
    "ephemeral": {
      "ap-northeast-1": { "64": "NOT_YET_SUPPORTED" }, 
      "ap-southeast-1": { "64": "NOT_YET_SUPPORTED" }, 
      "eu-west-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "sa-east-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "us-east-1"     : { "64": "ami-6cb2f706" }, 
      "us-west-1"     : { "64": "NOT_YET_SUPPORTED" }, 
      "us-west-2"     : { "64": "NOT_YET_SUPPORTED" }
    }
  }, 
  "Outputs": {
    "Bastion": {
      "Description": "IP Address of the Bastion host", 
      "Value": {
        "Ref": "BastionIPAddress"
      }
    }
  }, 
  "Parameters": {
    "BastionInstanceType": {
      "AllowedValues": [
        "t2.micro", 
        "t2.small", 
        "m3.medium", 
        "m3.large", 
        "m3.xlarge" 
      ], 
      "ConstraintDescription": "must be a valid EC2 instance type.", 
      "Default": "m3.medium", 
      "Description": "Bastion Host EC2 instance type", 
      "Type": "String"
    }, 
    "DiskType": {
      "AllowedValues": [
        "ephemeral", 
        "ebs"
      ], 
      "Default": "ephemeral", 
      "Description": "Type of Disk to use ( ephemeral/ebs )", 
      "Type": "String"
    }, 
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*", 
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.", 
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances", 
      "MaxLength": "64", 
      "MinLength": "1", 
      "Type": "String"
    }, 
    "NATInstanceType": {
      "AllowedValues": [
        "t2.micro", 
        "t2.small", 
        "m3.medium", 
        "m3.large", 
        "m3.xlarge" 
      ], 
      "ConstraintDescription": "must be a valid EC2 instance type.", 
      "Default": "m3.medium", 
      "Description": "NET Device EC2 instance type", 
      "Type": "String"
    }, 
    "GPDBNodeCount": {
      "Default": "4", 
      "Description": "Number of EC2 instances to launch for Pivotal GPDB Cluster", 
      "Type": "Number"
    }, 
    "GPDBInstanceType": {
      "AllowedValues": [
        "c3.xlarge", 
        "c3.2xlarge", 
        "c3.4xlarge", 
        "c3.8xlarge" 
      ], 
      "ConstraintDescription": "must be a valid EC2 instance type.", 
      "Default": "c3.xlarge", 
      "Description": "GPDB EC2 instance type", 
      "Type": "String"
    }, 
    "SSHFrom": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.", 
      "Default": "0.0.0.0/0", 
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)", 
      "MaxLength": "18", 
      "MinLength": "9", 
      "Type": "String"
    }
  }, 
  "Resources": {
    "BackendFleet": {
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PrivateSubnet", 
              "AvailabilityZone"
            ]
          }
        ], 
        "DesiredCapacity": {
          "Ref": "GPDBNodeCount"
        }, 
        "LaunchConfigurationName": {
          "Ref": "BackendLaunchConfig"
        }, 
        "LoadBalancerNames": [
          {
            "Ref": "PrivateElasticLoadBalancer"
          }
        ], 
        "MaxSize": "10", 
        "MinSize": "1", 
        "Tags": [
          {
            "Key": "Network", 
            "PropagateAtLaunch": "true", 
            "Value": "Private"
          },
          {
            "Key": "Name", 
            "PropagateAtLaunch": "true", 
            "Value": "GPDBHost"
          }
        ], 
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ]
      }, 
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    }, 
    "BackendLaunchConfig": {
      "DependsOn": [
        "BastionIPAddress", 
        "NATIPAddress", 
        "PrivateSubnetRouteTableAssociation", 
        "PrivateSubnetNetworkAclAssociation"
      ], 
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        }, 
        "ImageId": {
          "Fn::FindInMap": [
            {
              "Ref": "DiskType"
            }, 
            {
              "Ref": "AWS::Region"
            }, 
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch", 
                {
                  "Ref": "GPDBInstanceType"
                }, 
                "Arch"
              ]
            }
          ]
        }, 
        "InstanceType": {
          "Ref": "GPDBInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroups": [
          {
            "Ref": "BackendSecurityGroup"
          }
        ], 
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -v",
                "exec > >(tee /var/log/cfn-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                "",
                "sleep 10",
                "",
                "function retry {",
                "   nTrys=0",
                "   maxTrys=5",
                "   status=256",
                "   until [ $status == 0 ] ; do",
                "      $1",
                "      status=$?",
                "      nTrys=$(($nTrys + 1))",
                "      if [ $nTrys -gt $maxTrys ] ; then",
                "            echo \"Number of re-trys exceeded. Exit code: $status\"",
                "            exit $status",
                "      fi",
                "      if [ $status != 0 ] ; then",
                "            echo \"Failed (exit code $status)... retry $nTrys\"",
                "            sleep 10",
                "      fi",
                "   done",
                "}",
                "",
                "yum update -y aws-cfn-bootstrap",
                "",
                "#for all the stuff that complains about sudo and tty",
                "sed -i 's,Defaults    requiretty,#Defaults    requiretty,g' /etc/sudoers",
                "",
                "function error_exit",
                "{",
                {
                  "Fn::Join": [
                    "",
                    [
                      "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                      {
                        "Ref": "BackendWaitHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "}",
                "yum update -y aws-cfn-bootstrap",
                "#this runs the first stage of cfinit",
                {
                  "Fn::Join": [
                    "",
                    [
                      "#/opt/aws/bin/cfn-init -c ascending -v --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "BackendLaunchConfig",
                      " --access-key ",
                      {
                        "Ref": "HostKeys"
                      },
                      " --secret-key ",
                      {
                        "Fn::GetAtt": [
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      " || error_exit 'Failed to initialize client using cfn-init'"
                    ]
                  ]
                },
                "",
                "",
                "/usr/bin/perl /root/make_greenplum_ready.pl",
                "",
                "",
                "result_code=$?",
                {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e $result_code '",
                      {
                        "Ref": "BackendWaitHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "#turn back on requiretty for sudo",
                "sed -i 's,#Defaults    requiretty,Defaults    requiretty,g' /etc/sudoers"
              ]
            ]
          }
        }
      }, 
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }, 
    "BackendSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow access from private load balancer and bastion as well as outbound HTTP and HTTPS traffic", 
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "ToPort": "80"
          }, 
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "443", 
            "IpProtocol": "tcp", 
            "ToPort": "443"
          }
        ], 
        "SecurityGroupIngress": [
          {
            "FromPort": "5432", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "PrivateLoadBalancerSecurityGroup"
            }, 
            "ToPort": "5432"
          }, 
          {
            "FromPort": "5443", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "PrivateLoadBalancerSecurityGroup"
            }, 
            "ToPort": "5443"
          }, 
          {
            "FromPort": "22", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }, 
            "ToPort": "22"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "BackendWaitCondition": {
      "DependsOn": "BackendFleet", 
      "Properties": {
        "Count": {
          "Ref": "GPDBNodeCount"
        }, 
        "Handle": {
          "Ref": "BackendWaitHandle"
        }, 
        "Timeout": "1200"
      }, 
      "Type": "AWS::CloudFormation::WaitCondition"
    }, 
    "BackendWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }, 
    "GPDBMasterHost": {
      "DependsOn": [
        "BackendFleet",
        "BastionIPAddress", 
        "NATIPAddress", 
        "PrivateSubnetRouteTableAssociation", 
        "PrivateSubnetNetworkAclAssociation"
      ],
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "ephemeral",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "GPDBInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "GPDBInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BackendSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "Tags": [
          {"Key": "Name", "Value": "GPDBMasterHost"}
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -v",
                "sleep 10",
                "",
                "yum update -y aws-cfn-bootstrap",
                "",
                "#for all the stuff that complains about sudo and tty",
                "sed -i 's,Defaults    requiretty,#Defaults    requiretty,g' /etc/sudoers",
                "",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 0 -r \"$1\" '", { "Ref" : "BackendWaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",
                "",
                "",
                "/usr/bin/perl /root/make_greenplum_ready.pl",
                "sleep 300",
                "yum install -y nmap",
                "hostname mdw",
                "sed -i \"s/HOSTNAME=.*/HOSTNAME=mdw/g\" /etc/sysconfig/network",
                "nmap -p22 -oG - 10.0.1.0/24 | grep -i open | cut -d ' ' -f 2 | grep '10.0.1' > /home/gpadmin/ip_hosts.all",
                "grep -v '10.0.1.254' /home/gpadmin/ip_hosts.all | grep -v '10.0.1.253' > /home/gpadmin/ip_hosts.seg",
                "echo '10.0.1.254 mdw' > /root/hosts",
                "echo '10.0.1.253 smdw' >> /root/hosts",
                "COUNTER=1; for i in `cat /home/gpadmin/ip_hosts.seg`; do echo \"$i sdw$COUNTER\" >> /root/hosts; COUNTER=$[$COUNTER +1]; done",
                "cp /root/hosts /etc/hosts",
                "cut -d ' ' -f 2 /root/hosts > /home/gpadmin/hosts.all",
                "cut -d ' ' -f 2 /root/hosts | egrep -v 'mdw' > /home/gpadmin/hosts.seg",
                "su -l gpadmin -c \"gpssh-exkeys -f ~/hosts.all\"",
                "",
                "",
                "for i in `cat /home/gpadmin/hosts.seg`; do ssh $i \"hostname $i\"; done",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"GPDB setup complete\" '", { "Ref" : "BackendWaitHandle" }, "'\n",
                "",
                "#turn back on requiretty for sudo",
                "sed -i 's,#Defaults    requiretty,Defaults    requiretty,g' /etc/sudoers"
              ]
            ]
          }
        },

      "PrivateIpAddress": "10.0.1.254"
      },
      "Type": "AWS::EC2::Instance"
    },
    "GPDBStandbyHost": {
      "DependsOn": [
        "BastionIPAddress",
        "NATIPAddress",
        "PrivateSubnetRouteTableAssociation",
        "PrivateSubnetNetworkAclAssociation"
      ],
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "ephemeral",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "GPDBInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "GPDBInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
          {
            "Ref": "BackendSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "Tags": [
          {"Key": "Name", "Value": "GPDBStandbyHost"}
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -v",
                "exec > >(tee /var/log/cfn-data.log|logger -t user-data -s 2>/dev/console) 2>&1",
                "",
                "sleep 10",
                "",
                "function retry {",
                "   nTrys=0",
                "   maxTrys=5",
                "   status=256",
                "   until [ $status == 0 ] ; do",
                "      $1",
                "      status=$?",
                "      nTrys=$(($nTrys + 1))",
                "      if [ $nTrys -gt $maxTrys ] ; then",
                "            echo \"Number of re-trys exceeded. Exit code: $status\"",
                "            exit $status",
                "      fi",
                "      if [ $status != 0 ] ; then",
                "            echo \"Failed (exit code $status)... retry $nTrys\"",
                "            sleep 10",
                "      fi",
                "   done",
                "}",
                "",
                "yum update -y aws-cfn-bootstrap",
                "",
                "hostname smdw",
                "sed -i \"s/HOSTNAME=.*/HOSTNAME=smdw/g\" /etc/sysconfig/network",
                "",
                "#for all the stuff that complains about sudo and tty",
                "sed -i 's,Defaults    requiretty,#Defaults    requiretty,g' /etc/sudoers",
                "",
                "function error_exit",
                "{",
                {
                  "Fn::Join": [
                    "",
                    [
                      "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                      {
                        "Ref": "BackendWaitHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "}",
                "yum update -y aws-cfn-bootstrap",
                "#this runs the first stage of cfinit",
                {
                  "Fn::Join": [
                    "",
                    [
                      "#/opt/aws/bin/cfn-init -c ascending -v --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      " -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r ",
                      "BackendLaunchConfig",
                      " --access-key ",
                      {
                        "Ref": "HostKeys"
                      },
                      " --secret-key ",
                      {
                        "Fn::GetAtt": [
                          "HostKeys",
                          "SecretAccessKey"
                        ]
                      },
                      " || error_exit 'Failed to initialize client using cfn-init'"
                    ]
                  ]
                },
                "",
                "",
                "/usr/bin/perl /root/make_greenplum_ready.pl",
                "",
                "",
                "result_code=$?",
                {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e $result_code '",
                      {
                        "Ref": "BackendWaitHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "#turn back on requiretty for sudo",
                "sed -i 's,#Defaults    requiretty,Defaults    requiretty,g' /etc/sudoers"
              ]
            ]
          }
        },
        "PrivateIpAddress": "10.0.1.253"
      },
      "Type": "AWS::EC2::Instance"
    },

    "BastionHost": {
      "DependsOn": [
        "PublicSubnetRouteTableAssociation", 
        "PublicSubnetNetworkAclAssociation"
      ], 
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "ephemeral", 
            {
              "Ref": "AWS::Region"
            }, 
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch", 
                {
                  "Ref": "BastionInstanceType"
                }, 
                "Arch"
              ]
            }
          ]
        }, 
        "InstanceType": {
          "Ref": "BastionInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroupIds": [
          {
            "Ref": "BastionSecurityGroup"
          }
        ], 
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {"Key": "Name", "Value": "BastionHost"}
        ]
      }, 
      "Type": "AWS::EC2::Instance"
    }, 
    "BastionIPAddress": {
      "DependsOn": "GatewayToInternet", 
      "Properties": {
        "Domain": "vpc", 
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }, 
      "Type": "AWS::EC2::EIP"
    }, 
    "BastionSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable access to the Bastion host", 
        "SecurityGroupEgress": [
          {
            "CidrIp": {
              "Fn::FindInMap": [
                "SubnetConfig", 
                "Private", 
                "CIDR"
              ]
            }, 
            "FromPort": "22", 
            "IpProtocol": "tcp", 
            "ToPort": "22"
          }
        ], 
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Ref": "SSHFrom"
            }, 
            "FromPort": "22", 
            "IpProtocol": "tcp", 
            "ToPort": "22"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "CFNInitUser": {
      "Properties": {
        "Path": "/", 
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "cloudformation:DescribeStackResource", 
                    "s3:GetObject"
                  ], 
                  "Effect": "Allow", 
                  "Resource": "*"
                }
              ]
            }, 
            "PolicyName": "AccessForCFNInit"
          }
        ]
      }, 
      "Type": "AWS::IAM::User"
    }, 
    "ClusterCommunication1": {
      "Properties": {
        "FromPort": "-1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "icmp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "-1"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "ClusterCommunication2": {
      "Properties": {
        "FromPort": "1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "ClusterCommunication3": {
      "Properties": {
        "FromPort": "1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupIngress"
    }, 
    "ClusterCommunication4": {
      "Properties": {
        "FromPort": "-1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "icmp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "-1"
      }, 
      "Type": "AWS::EC2::SecurityGroupEgress"
    }, 
    "ClusterCommunication5": {
      "Properties": {
        "FromPort": "1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "tcp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupEgress"
    }, 
    "ClusterCommunication6": {
      "Properties": {
        "FromPort": "1", 
        "GroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "IpProtocol": "udp", 
        "SourceSecurityGroupId": {
          "Ref": "BackendSecurityGroup"
        }, 
        "ToPort": "65356"
      }, 
      "Type": "AWS::EC2::SecurityGroupEgress"
    }, 
    "GatewayToInternet": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }, 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }, 
    "HostKeys": {
      "Properties": {
        "UserName": {
          "Ref": "CFNInitUser"
        }
      }, 
      "Type": "AWS::IAM::AccessKey"
    }, 
    "InboundEmphemeralPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "1024", 
          "To": "65535"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "103"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InboundHTTPPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "80", 
          "To": "80"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InboundHTTPSPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "443", 
          "To": "443"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "101"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InboundPrivateNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InboundSSHPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": {
          "Ref": "SSHFrom"
        }, 
        "Egress": "false", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "22", 
          "To": "22"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "102"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ]
      }, 
      "Type": "AWS::EC2::InternetGateway"
    }, 
    "NATDevice": {
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI", 
            {
              "Ref": "AWS::Region"
            }, 
            "AMI"
          ]
        }, 
        "InstanceType": {
          "Ref": "NATInstanceType"
        }, 
        "KeyName": {
          "Ref": "KeyName"
        }, 
        "SecurityGroupIds": [
          {
            "Ref": "NATSecurityGroup"
          }
        ], 
        "SourceDestCheck": "false", 
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          { "Key": "Name", "Value": "NATHost"}
        ]
      }, 
      "Type": "AWS::EC2::Instance"
    }, 
    "NATIPAddress": {
      "DependsOn": "GatewayToInternet", 
      "Properties": {
        "Domain": "vpc", 
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }, 
      "Type": "AWS::EC2::EIP"
    }, 
    "NATSecurityGroup": {
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device", 
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "ToPort": "80"
          }, 
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "443", 
            "IpProtocol": "tcp", 
            "ToPort": "443"
          }
        ], 
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "80", 
            "IpProtocol": "tcp", 
            "ToPort": "80"
          }, 
          {
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "443", 
            "IpProtocol": "tcp", 
            "ToPort": "443"
          }, 
          {
            "CidrIp": {
              "Ref": "SSHFrom"
            }, 
            "FromPort": "22", 
            "IpProtocol": "tcp", 
            "ToPort": "22"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "OutBoundPrivateNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "true", 
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "OutboundPublicNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0", 
        "Egress": "true", 
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "PortRange": {
          "From": "0", 
          "To": "65535"
        }, 
        "Protocol": "6", 
        "RuleAction": "allow", 
        "RuleNumber": "100"
      }, 
      "Type": "AWS::EC2::NetworkAclEntry"
    }, 
    "PrivateElasticLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "3", 
          "Interval": "90", 
          "Target": "TCP:5432", 
          "Timeout": "60", 
          "UnhealthyThreshold": "5"
        }, 
        "Listeners": [
          {
            "InstancePort": "5432", 
            "LoadBalancerPort": "5432", 
            "Protocol": "TCP"
          }, 
          {
            "InstancePort": "5443", 
            "LoadBalancerPort": "5443", 
            "Protocol": "TCP"
          }
        ], 
        "Scheme": "internal", 
        "SecurityGroups": [
          {
            "Ref": "PrivateLoadBalancerSecurityGroup"
          }
        ], 
        "Subnets": [
          {
            "Ref": "PrivateSubnet"
          }
        ]
      }, 
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    }, 
    "PrivateLoadBalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Private ELB Security Group", 
        "SecurityGroupIngress": [
          {
            "FromPort": "5432", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }, 
            "ToPort": "5432"
          }, 
          {
            "FromPort": "5443", 
            "IpProtocol": "tcp", 
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }, 
            "ToPort": "5443"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::SecurityGroup"
    }, 
    "PrivateNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Private"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::NetworkAcl"
    }, 
    "PrivateRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "InstanceId": {
          "Ref": "NATDevice"
        }, 
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PrivateRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Private"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PrivateSubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig", 
            "Private", 
            "CIDR"
          ]
        }, 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Private"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PrivateSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    }, 
    "PrivateSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }, 
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "PublicNetworkAcl": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::NetworkAcl"
    }, 
    "PublicRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0", 
        "GatewayId": {
          "Ref": "InternetGateway"
        }, 
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }, 
      "Type": "AWS::EC2::Route"
    }, 
    "PublicRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::RouteTable"
    }, 
    "PublicSubnet": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig", 
            "Public", 
            "CIDR"
          ]
        }, 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ], 
        "VpcId": {
          "Ref": "VPC"
        }
      }, 
      "Type": "AWS::EC2::Subnet"
    }, 
    "PublicSubnetNetworkAclAssociation": {
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    }, 
    "PublicSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }, 
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }, 
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }, 
    "RolePolicies": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeAvailabilityZones", 
                "ec2:DescribeInstanceStatus", 
                "ec2:DescribeInstances", 
                "ec2:DescribeRegions", 
                "ec2:DescribeTags"
              ], 
              "Effect": "Allow", 
              "Resource": "*"
            }
          ]
        }, 
        "PolicyName": "root", 
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }, 
      "Type": "AWS::IAM::Policy"
    }, 
    "RootInstanceProfile": {
      "Properties": {
        "Path": "/", 
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      }, 
      "Type": "AWS::IAM::InstanceProfile"
    }, 
    "RootRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "Path": "/"
      }, 
      "Type": "AWS::IAM::Role"
    }, 
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig", 
            "VPC", 
            "CIDR"
          ]
        }, 
        "Tags": [
          {
            "Key": "Application", 
            "Value": {
              "Ref": "AWS::StackName"
            }
          }, 
          {
            "Key": "Network", 
            "Value": "Public"
          }
        ]
      }, 
      "Type": "AWS::EC2::VPC"
    }
  }
}
